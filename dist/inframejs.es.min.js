/*! 
   name: iframeBridge
   version: 1.1.2
   file: inframejs.min.js
   author: web.szy
   buildTime: 2022/2/17 下午1:51:36
 */
const version = "1.1.2";
const Inframe = class {
  constructor({ target, whiteList, libName, debug, isSubPage, isNewWindow } = {}) {
    this.setTarget(target);
    this.setLibName(libName);
    if (typeof whiteList !== "undefined" && !Array.isArray(whiteList)) {
      console.warn("whiteList must be a domain Array");
      return false;
    }
    this.isNewWindow = isNewWindow;
    this.whiteList = (whiteList || []).filter((e) => typeof e === "string").map((e) => e.toLowerCase());
    this.debug = !!debug;
    this.isSubPage = typeof isSubPage === "undefined" ? true : isSubPage;
    this.isConneted = this.isSubPage;
    this.version = version;
    this.handlersMap = /* @__PURE__ */ new Map();
    this.emitCache = [];
    if (!window) {
      console.warn(`inframe bridge must init on the browser`);
      return false;
    }
    window.getInframeInstace = () => this;
    window.addEventListener("message", this.handleEvent.bind(this));
    if (this.isSubPage) {
      this.emit("connected", "sub Page connected");
      console.log("sub instance", this);
    } else {
      this.on("connected", () => {
        this.isConneted = true;
        this.emitCache.forEach(({ eventName, data }) => this.emit(eventName, data));
        this.emitCache = [];
      });
    }
    return this;
  }
  setTarget(target) {
    if (typeof target === "string") {
      this.target = document.querySelector(target);
    } else if (typeof target !== "undefined") {
      this.target = target;
    } else {
      this.target = null;
    }
  }
  setLibName(name) {
    this.libName = name || "inframe";
  }
  on(eventName, handler) {
    this.logger(`${eventName} has been watched`);
    if (this.handlersMap.has(eventName)) {
      const handlers = this.handlersMap.get(eventName);
      handlers.push(handler);
      this.handlersMap.set(eventName, handlers);
    } else {
      this.handlersMap.set(eventName, [handler]);
    }
  }
  off(eventName) {
    if (this.handlersMap.has(eventName)) {
      this.handlersMap.delete(eventName);
    }
  }
  emit(eventName, data) {
    const msg = {
      event: eventName,
      params: data,
      lib: this.libName,
      isSubPage: this.isSubPage
    };
    this.logger(`${eventName} has been emit::${JSON.stringify(msg)}`);
    try {
      if (this.isConneted) {
        if (this.isSubPage) {
          if (this.isNewWindow) {
            window.opener.postMessage(msg, "*");
          } else {
            window.parent.postMessage(msg, "*");
          }
        } else {
          if (this.isNewWindow) {
            this.target.postMessage(msg, "*");
          } else {
            this.target.contentWindow.postMessage(msg, "*");
          }
        }
      } else {
        this.emitCache.push({ eventName, data });
      }
    } catch (e) {
      this.logger(e.message);
      this.destroy();
    }
  }
  handleEvent(e) {
    if (!e || typeof e.data !== "object" || !(e.data.lib && e.data.lib === this.libName) || this.isSubPage === e.data.isSubPage) {
      return;
    }
    if (this.whiteList.length) {
      const checked = this.whiteList.some((domain) => domain.indexOf(e.origin) > -1);
      if (!checked) {
        console.warn("you are not access to inframe");
        return;
      }
    }
    const { data } = e;
    if (this.handlersMap.has(data.event)) {
      this.logger(`received data: ${JSON.stringify(data)}`);
      const handlers = this.handlersMap.get(data.event);
      handlers.forEach((handler) => handler(data));
    } else {
      this.logger(`handlers not find: ${JSON.stringify(data)}`);
    }
  }
  destroy() {
    this.handlersMap.clear();
    window.getInframeInstace = null;
    window.removeEventListener("message", this.handleEvent);
  }
  logger(message) {
    if (!this.debug) {
      return;
    }
    const d = new Date();
    const time = `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`;
    const pageName = this.isSubPage ? "\u5B50\u9875\u9762" : "\u4E3B\u9875\u9762";
    console.log(`${time}-${pageName}::${message}`);
  }
};
export { Inframe as default };
